{"version":3,"sources":["components/Node.js","components/dijkstra.js","components/PathPlanningVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["Node","node","addWall","mouseDown","updateStart","moveStart","updateEnd","moveEnd","useState","classState","setClassState","useEffect","isStart","console","log","isEnd","isWall","style","backgroundColor","color","value","getBackgroundColor","onMouseDown","row","col","onMouseOver","id","className","dijkstra","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathPlanningVisualizer","GRID_ROW","GRID_COL","START_GRID_COL","setStartGridCol","START_GRID_ROW","setStartGridRow","END_GRID_ROW","setEndGridRow","END_GRID_COL","setEndGridCol","moveStartClicked","setMoveStartClicked","moveEndClicked","setEndClicked","randWeight","setRandWeight","board","setBoard","setMouseDown","createNode","rand","Math","floor","random","resetGrid","currentRow","animateDijkstra","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","getNewGridWithWallToggled","newGrid","slice","newNode","Grid","container","direction","spacing","item","Button","variant","onClick","currentNode","unshift","getNodesInShortestPathOrder","handleButtonClick","window","location","reload","onMouseUp","map","rowId","colId","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b164be05.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useState,useEffect} from 'react';\r\nimport './Node2.css'; \r\n\r\nexport default function Node({node,addWall,mouseDown,updateStart,moveStart,updateEnd,moveEnd}) {\r\n    \r\n    const [classState,setClassState] = useState('node');\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        if(node.isStart){\r\n            console.log(node);\r\n            console.log(\"START NODE\")\r\n            setClassState('node start');\r\n        }else if(node.isEnd){\r\n            setClassState('node finish');\r\n        }else if(node.isWall){\r\n            setClassState('node-wall');\r\n        }\r\n        else{\r\n            setClassState('node'); \r\n        }\r\n\r\n\r\n    }, []) \r\n      \r\n    const doSomething = () => {\r\n        console.log(mouseDown)\r\n        if(mouseDown){\r\n            console.log(\"mouse over\");\r\n            addWall(node.row,node.col);    \r\n        }\r\n    }\r\n\r\n    const updateToStartFinish = () => {\r\n        if(moveStart){\r\n            updateStart(node.row,node.col); \r\n        }\r\n        if(moveEnd){\r\n            updateEnd(node.row,node.col);\r\n        }\r\n    }\r\n    const getBackgroundColor = () => {\r\n        let color;\r\n\r\n        if(node.value === 1){\r\n            color = '';\r\n        }else if(node.value === 2){\r\n            color = 'rgb(0, 255, 106)';\r\n        }\r\n        else if(node.value === 3){\r\n            color = 'rgb(157, 255, 0)';\r\n        }\r\n        else if(node.value === 4){\r\n            color = 'rgb(137, 144, 94)';\r\n        }\r\n        else if(node.value === 5){\r\n            color = 'rgb(255, 208, 0)';\r\n        }\r\n\r\n        return color;\r\n    };\r\n\r\n\r\n    return (\r\n        <div style={{backgroundColor: getBackgroundColor()}} onMouseDown={() => {updateToStartFinish()}} onMouseOver={()=> {doSomething()}} id={`node-${node.row}-${node.col}`} className={classState} >\r\n            {node.value}\r\n        </div>\r\n    )\r\n}\r\n","export function dijkstra(grid, startNode, endNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode.isWall) continue;\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === endNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + node.value;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  // Backtracks from the endNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  export function getNodesInShortestPathOrder(endNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = endNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Node from \"./Node\";\r\nimport \"./PathPlanningVisualizer.css\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"./dijkstra\";\r\n\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\n// const START_GRID_ROW = 10;\r\n// const START_GRID_COL = 10;\r\n// const END_GRID_ROW = 10;\r\n// const END_GRID_COL = 20;\r\n\r\nexport default function PathPlanningVisualizer() {\r\n  const [GRID_ROW, setGridRow] = useState(40);\r\n  const [GRID_COL, setGridCol] = useState(40);\r\n\r\n  const [START_GRID_COL,setStartGridCol] = useState(10);\r\n  const [START_GRID_ROW,setStartGridRow] = useState(10);\r\n  const [END_GRID_ROW,setEndGridRow] = useState(20);\r\n  const [END_GRID_COL,setEndGridCol] = useState(20);\r\n  const [moveStartClicked,setMoveStartClicked] = useState(false);\r\n  const [moveEndClicked,setEndClicked] = useState(false); \r\n  const [randWeight, setRandWeight] = useState(false)\r\n\r\n  const [board, setBoard] = useState([]);\r\n\r\n  const [mouseDown, setMouseDown] = useState(false);\r\n\r\n  const createNode = (col, row,rand) => {\r\n    \r\n    return {\r\n      col,\r\n      row,\r\n      previousNode: null,\r\n      distance: Infinity,\r\n      value : rand ? Math.floor(Math.random() * (5 - 1 + 1) + 1) : 1,\r\n      isStart: col === START_GRID_COL && row === START_GRID_ROW,\r\n      isEnd: col === END_GRID_COL && row === END_GRID_ROW,\r\n    };\r\n  };\r\n\r\n  const resetGrid = (rand) => {\r\n    const grid = [];\r\n    for (let row = 0; row < GRID_ROW; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < GRID_COL; col++) {\r\n        currentRow.push(createNode(col, row,rand));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    setBoard(grid);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"Initalizing Grid\");\r\n    resetGrid(randWeight);\r\n  }, []);\r\n\r\n  const handleButtonClick = () => {\r\n    console.log(\"Button Click\");\r\n    // let row = Math.floor(Math.random() * GRID_ROW);\r\n    // let col = Math.floor(Math.random() * GRID_COL);\r\n    // document.getElementById(`node-${row}-${col}`).className ='node wall';\r\n    const startNode = board[START_GRID_ROW][START_GRID_COL];\r\n    const endNode = board[END_GRID_ROW][END_GRID_COL];\r\n    const visitedNodesInOrder = dijkstra(board, startNode, endNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode);\r\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  };\r\n\r\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node visited\";\r\n      }, 10 * i);\r\n    }\r\n  };\r\n\r\n  const animateShortestPath = (nodesInShortestPathOrder) => {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  };\r\n\r\n  const getNewGridWithWallToggled = (row, col) => {\r\n    const newGrid = board.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    if (node.isStart || node.isEnd) {\r\n      return;\r\n    }\r\n\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    if (newNode.isWall) {\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        \"node wall\";\r\n    } else {\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        \"node\";\r\n    }\r\n\r\n    newGrid[row][col] = newNode;\r\n    setBoard(newGrid);\r\n  };\r\n\r\n  const moveStart = () => {\r\n\r\n    setMoveStartClicked(true); \r\n    const newGrid = board.slice();\r\n    const node = newGrid[START_GRID_ROW][START_GRID_COL];\r\n    const newNode = {\r\n        ...node,\r\n        isStart: false,\r\n      };\r\n      newGrid[START_GRID_ROW][START_GRID_COL] = newNode;\r\n      setBoard(newGrid);\r\n      document.getElementById(`node-${START_GRID_ROW}-${START_GRID_COL}`).className =\r\n        \"node\";\r\n  };\r\n    \r\n  const updateStart = (row,col) => {\r\n    console.log(\"Update Start Pressed\"); \r\n    setMoveStartClicked(false);\r\n    const newGrid = board.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n      ...node,\r\n      isStart: true,\r\n    };\r\n    setStartGridCol(col);\r\n    setStartGridRow(row);\r\n    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        \"node start\";\r\n    newGrid[row][col] = newNode;\r\n    setBoard(newGrid);\r\n  }\r\n\r\n  const resetNodeWeights = () => {\r\n    setRandWeight(!randWeight)\r\n    resetGrid(randWeight)\r\n  }\r\n\r\n  const moveEnd = () => {\r\n\r\n    setEndClicked(true); \r\n    const newGrid = board.slice();\r\n    const node = newGrid[END_GRID_ROW][END_GRID_COL];\r\n    const newNode = {\r\n        ...node,\r\n        isEnd: false,\r\n      };\r\n      newGrid[END_GRID_ROW][END_GRID_COL] = newNode;\r\n      setBoard(newGrid);\r\n      document.getElementById(`node-${END_GRID_ROW}-${END_GRID_COL}`).className =\r\n        \"node\";\r\n  };\r\n    \r\n  const updateEnd = (row,col) => {\r\n    console.log(\"update end\"); \r\n    setEndClicked(false);\r\n    const newGrid = board.slice();\r\n    const node = newGrid[row][col];\r\n\r\n    const newNode = {\r\n      ...node,\r\n      isEnd: true,\r\n    };\r\n    setEndGridCol(col);\r\n    setEndGridRow(row);\r\n    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        \"node finish\";\r\n    newGrid[row][col] = newNode;\r\n    setBoard(newGrid);\r\n  }\r\n  return (\r\n    <div>\r\n      <Grid container direction=\"column\" spacing={1}>\r\n        <Grid item container direction=\"row\" spacing={4}>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={() => {\r\n                handleButtonClick();\r\n              }}\r\n            >\r\n              Run Dijstra's Algorithm\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"error\"\r\n              onClick={() => {\r\n                window.location.reload(false);\r\n              }}\r\n            >\r\n              Reset Grid\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"error\"\r\n              onClick={() => {\r\n                resetNodeWeights();\r\n              }}\r\n            >\r\n              Random Weights\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              onClick={() => {\r\n                moveStart();\r\n              }}\r\n            >\r\n              Move Start\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              onClick={() => {\r\n                moveEnd();\r\n              }}\r\n            >\r\n              Move End\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <div\r\n            onMouseDown={() => {\r\n              setMouseDown(true);\r\n            }}\r\n            onMouseUp={() => {\r\n              setMouseDown(false);\r\n            }}\r\n          >\r\n            {board.map((row, rowId) => {\r\n              return (\r\n                <div className=\"row\" key={rowId}>\r\n                  {row.map((node, colId) => {\r\n                    return (\r\n                      <Node\r\n                        node={node}\r\n                        addWall={getNewGridWithWallToggled}\r\n                        mouseDown={mouseDown}\r\n                        updateStart={updateStart}\r\n                        moveStart={moveStartClicked}\r\n                        updateEnd={updateEnd}\r\n                        moveEnd={moveEndClicked}\r\n                      ></Node>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","\nimport './App.css';\nimport PathPlanningVisualizer from './components/PathPlanningVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Path-Planning : Dijsktra's Algorithm Demo : Operation Research Fall 2021\n        <PathPlanningVisualizer></PathPlanningVisualizer> \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}